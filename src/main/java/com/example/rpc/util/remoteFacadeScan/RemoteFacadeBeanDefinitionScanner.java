package com.example.rpc.util.remoteFacadeScan;import com.example.rpc.util.annotation.RemoteFacade;import com.example.rpc.util.proxy.RPCProxy;import com.example.rpc.util.reference.RPCReferenceBean;import org.springframework.beans.factory.FactoryBean;import org.springframework.beans.factory.config.BeanDefinition;import org.springframework.beans.factory.config.BeanDefinitionHolder;import org.springframework.beans.factory.support.AbstractBeanDefinition;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;import org.springframework.beans.factory.support.BeanDefinitionRegistry;import org.springframework.context.annotation.AnnotationConfigUtils;import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;import org.springframework.core.env.Environment;import org.springframework.core.io.Resource;import org.springframework.core.io.support.ResourcePatternResolver;import org.springframework.core.type.AnnotationMetadata;import org.springframework.core.type.classreading.MetadataReader;import org.springframework.core.type.classreading.MetadataReaderFactory;import org.springframework.core.type.filter.TypeFilter;import org.springframework.util.ClassUtils;import java.io.IOException;import java.util.LinkedHashSet;import java.util.Set;public class RemoteFacadeBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider {    static final String resourcePattern = "**/*.class";    private MetadataReaderFactory metadataReaderFactory;    private ResourcePatternResolver resourcePatternResolver;    private BeanDefinitionRegistry registry;    private AnnotationMetadata metadata;    public RemoteFacadeBeanDefinitionScanner() {    }    public RemoteFacadeBeanDefinitionScanner(boolean useDefaultFilters) {        super(useDefaultFilters);    }    public RemoteFacadeBeanDefinitionScanner(boolean useDefaultFilters, Environment environment) {        super(useDefaultFilters, environment);    }    public RemoteFacadeBeanDefinitionScanner(boolean useDefaultFilters, Environment environment,                                             MetadataReaderFactory metadataReaderFactory,                                             ResourcePatternResolver resourcePatternResolver,                                             BeanDefinitionRegistry registry, AnnotationMetadata metadata) {        super(useDefaultFilters, environment);        this.metadataReaderFactory = metadataReaderFactory;        this.resourcePatternResolver = resourcePatternResolver;        this.registry = registry;        this.metadata = metadata;    }    @Override    public void addIncludeFilter(TypeFilter includeFilter) {        super.addIncludeFilter(includeFilter);    }    @Override    protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException {        return super.isCandidateComponent(metadataReader);    }    public int scan(String[] basePacakges) throws IOException {        int count = this.registry.getBeanDefinitionCount();        Set<BeanDefinition> beanDefinitions = doScan(basePacakges);        AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);        return this.registry.getBeanDefinitionCount() - count;    }    protected Set<BeanDefinition> doScan(String[] basePackages) throws IOException {        Set<BeanDefinition> beanDefinitions = new LinkedHashSet<>();        for (String basePackage : basePackages) {            String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +                    ClassUtils.convertClassNameToResourcePath(getEnvironment().resolveRequiredPlaceholders(basePackage))                    + "/" + this.resourcePattern;            Resource[] resources= resourcePatternResolver.getResources(packageSearchPath);            MetadataReader metadataReader = null;            for (Resource resource : resources) {                if (resource.isReadable()) {                    metadataReader = metadataReaderFactory.getMetadataReader(resource);                    try {                        Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());                        BeanDefinition beanDefinition = registerRPCRemoteFacadeBean(registry, clazz);                        beanDefinitions.add(beanDefinition);                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }        }        return beanDefinitions;    }    private BeanDefinition registerRPCRemoteFacadeBean(BeanDefinitionRegistry registry, Class clazz) {        String className = clazz.getSimpleName();        // 获取RemoteFacade，给RPCReferenceBean属性赋值        RemoteFacade remoteFacade = (RemoteFacade) clazz.getAnnotation(RemoteFacade.class);        String domain = remoteFacade.domain();        BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(RPCReferenceBean.class);        builder.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_NAME);        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();        RPCProxy rpcProxy = new RPCProxy();        rpcProxy.setClazz(clazz);        builder.addPropertyValue("url", domain);        builder.addPropertyValue("proxy",rpcProxy);        beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE, className);        beanDefinition.setBeanClass(clazz);        BeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, className);        BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);        return beanDefinition;    }}