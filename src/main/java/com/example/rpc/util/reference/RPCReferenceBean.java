package com.example.rpc.util.reference;import com.example.rpc.service.StudentService;import com.example.rpc.util.proxy.RPCProxy;import org.springframework.beans.BeansException;import org.springframework.beans.factory.FactoryBean;import org.springframework.beans.factory.InitializingBean;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import java.lang.reflect.Type;import java.util.List;public class RPCReferenceBean<T> implements  FactoryBean, ApplicationContextAware, InitializingBean {    private String url;    private List<Class> classes;    private RPCProxy proxy;    private ApplicationContext applicationContext;    // 获取StudentService接口    public Object get() {        if (null != proxy) {            RPCProxy rpcProxy = getProxy();            Object result = rpcProxy.getProxy(url);            return result;        }        return null;    }    @Override    public Object getObject() throws Exception {        return get();    }    @Override    public Class<?> getObjectType() {        Type type = StudentService.class.getGenericSuperclass();        Class clazz = (Class) type;        return clazz;    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        this.applicationContext = applicationContext;    }    @Override    public void afterPropertiesSet() throws Exception {        // 如何获取对应的Class对象//        Type type = StudentService.class.getGenericSuperclass();//        Class clazz = (Class) type;//        for (Class c : getClasses()) {//            if (c == clazz) {//                RPCProxy rpcProxy = new RPCProxy(c);//                proxy = rpcProxy;//                return;//            }//        }    }    public List<Class> getClasses() {        return classes;    }    public void setClasses(List<Class> classes) {        this.classes = classes;    }    public String getUrl() {        return url;    }    public void setUrl(String url) {        this.url = url;    }    public RPCProxy getProxy() {        return proxy;    }    public void setProxy(RPCProxy proxy) {        this.proxy = proxy;    }}